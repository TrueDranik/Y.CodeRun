Эту задачу можно решать только на языке C++.

В сети появились злоумышленники, которые умеют перехватывать пересылаемые пакеты и добавлять к ним нежелательную информацию.
Вы научились сканировать пакеты и выявлять зараженные.
Сеть представляет собой ненаправленный граф, каждое ребро которого пронумеровано.
У вас есть класс, который посылает пакет по кратчайшему пути между двумя заданными вершинами.
Он возвращает маршрут пакета и то, был ли он заражен нежелательной информацией.
Необходимо написать программу, которая будет посылать пробные пакеты между произвольными вершинами, выявляя то ребро, на котором происходит заражение.
Для этого вам нужно сконструировать класс Network.
После этого, используя метод getPath(), вы можете послать неограниченное количество пробных пакетов с целью выявить зараженное ребро.
Класс Network и вспомогательные структуры Path и Edge описывается следующим заголовочным файлом Network.h:

struct Path
{
    std::vector<int> path = {};
    bool isContaminated = false;
};

struct Edge
{
    int id, i, j;
};

class Network
{
    public:
        Network(const std::vector<Edge> edges);
        Path getPath(int source, int dest);
        void printPath(Path path);
    private:
        int n;
        std::vector<Edge> edges;
        std::vector<std::vector<int>> adj;
        Path BFS(int source, int dest);
};

К сожалению, исходный код файла Network.cpp был утерян, остался только бинарный файл разделяемой библиотеки libnetwork.so.

Формат ввода
Первая строка входных данных содержит одно число — количество ребер.
В последующих строках перечисляется идентификационный номер ребра и два узла, которые оно связывает.
Идентификационный номер ребра может быть любым, но каждый номер ребра уникален. Узлы нумеруются с 0.
Можно считать, что все ребра имеют одинаковый вес.

Формат вывода
Выведите одно число — идентификационный номер зараженного ребра.

Пример 1
Ввод:
1
1 0 1

Вывод:
1

Пример 2
Ввод:
3
1 0 1
3 1 2
8 2 3

Вывод:
1

Пример 3
Ввод:
6
1 0 3
2 3 1
3 3 4
4 1 4
5 2 4
6 1 2

Вывод:
2

Примечания
Шаблон решения:

#include "Network.h"
#include <iostream>

int main(int argc, char* argv[])
{
   // 1. Read data from standard input.
   // 2. Construct Network object.
   // 3. Send some packets using getPath(int source, int destination) method to find the edge that contaminates them.
   // 4. Save edge id to standard output.
}