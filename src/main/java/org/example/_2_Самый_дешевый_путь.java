package org.example;

/*

    В каждой клетке прямоугольной таблицы N×M записано некоторое число.
    Изначально игрок находится в левой верхней клетке. За один ход ему разрешается перемещаться в соседнюю клетку либо вправо, либо вниз (влево и вверх перемещаться запрещено). При проходе через клетку с игрока берут столько килограммов еды, какое число записано в этой клетке (еду берут также за первую и последнюю клетки его пути).

    Требуется найти минимальный вес еды в килограммах, отдав которую игрок может попасть в правый нижний угол.

    Формат ввода
    Вводятся два числа N и M — размеры таблицы (1≤N≤20, 1≤M≤20).
    Затем идет N строк по M чисел в каждой — размеры штрафов в килограммах за прохождение через соответствующие клетки (числа от 0 до 100).

    Формат вывода
    Выведите минимальный вес еды в килограммах, отдав которую можно попасть в правый нижний угол.

    Пример 1
    Ввод
    5 5
    1 1 1 1 1
    3 100 100 100 100
    1 1 1 1 1
    2 2 2 2 1
    1 1 1 1 1
    Вывод
    11

 */

import java.util.Scanner;

public class _2_Самый_дешевый_путь {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] matrix = new int[n][m];

        // Ввод матрицы
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        // Вычисление сумм для первой строки и первого столбца
        for (int i = 1; i < n; i++) {
            matrix[i][0] += matrix[i - 1][0];
        }
        for (int i = 1; i < m; i++) {
            matrix[0][i] += matrix[0][i - 1];
        }

        // Вычисление минимального пути
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                int h = matrix[i - 1][j];
                int l = matrix[i][j - 1];
                matrix[i][j] += Math.min(h, l);
            }
        }

        System.out.println(matrix[n - 1][m - 1]);
    }

}
